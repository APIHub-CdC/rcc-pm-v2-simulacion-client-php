<?php
/**
 * CatalogoCalificacionCartera
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reporte de Crédito Consolidado Personas Morales
 *
 * <p>PI Reporte de Crédito Consolidado de Personas Morales. <br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@circulodecredito.com.mx
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RCCPMV2\Simulacion\MX\Client\Model;

use \ArrayAccess;
use \RCCPMV2\Simulacion\MX\Client\ObjectSerializer;

/**
 * CatalogoCalificacionCartera Class Doc Comment
 *
 * @category Class
 * @description Disposiciones de carácter general aplicables a las instituciones de crédito &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Grado de Riesgo&lt;/th&gt; &lt;th&gt;Resumen&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;A2&lt;/td&gt; &lt;td&gt;Desempeño de pago sobresaliente. Elementos cuantitativos del deudor son sobresalientes, con razones de liquidez sólidas. Flujo de efectivo operativo y proyectado, adecuados.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;EX&lt;/td&gt; &lt;td&gt;Cartera Exceptuada&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;NC&lt;/td&gt; &lt;td&gt;Cartera no Calificada&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;A1&lt;/td&gt; &lt;td&gt;Desempeño de pago sólido. Elementos cuantitativos del deudor y rentabilidad sólidos, con flujos de efectivo operativo y proyectado, suficientes para cubrir las obligaciones de deuda. A2 Desempeño de pago sobresaliente. Elementos cuantitativos del deudor son sobresalientes, con razones de liquidez sólidas. Flujo de efectivo operativo y proyectado, adecuados.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B1&lt;/td&gt; &lt;td&gt;Desempeño de pago bueno con riesgo aceptable. Elementos cuantitativos del deudor buenos, con liquidez positiva y rentabilidad sólida. Flujo de efectivo operativo en punto de equilibrio y apalancamiento adecuado.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B2&lt;/td&gt; &lt;td&gt;Desempeño de pago satisfactorio. Elementos cuantitativos del deudor satisfactorios, rentabilidad adecuada, flujo de efectivo operativo en punto de equilibrio y apalancamiento promedio a la industria.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B3&lt;/td&gt; &lt;td&gt;Desempeño de pago adecuado. Elementos cuantitativos del deudor adecuados con ciertas debilidades. Liquidez y rentabilidad adecuada, flujo de efectivo operativo en punto de equilibrio, con apalancamiento por encima del promedio de la industria.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C1&lt;/td&gt; &lt;td&gt;Desempeño de pago débil. Elementos cuantitativos del deudor débiles, con problemas en flujo de efectivo, liquidez, apalancamiento y/o rentabilidad. Requiere de fuentes secundarias de efectivo.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C2&lt;/td&gt; &lt;td&gt;Desempeño de pago insatisfactorio. Elementos cuantitativos del deudor pobres, con débil flujo de efectivo, liquidez, apalancamiento y/o rentabilidad. Clara dependencia de fuentes secundarias de reembolso para prevenir un incumplimiento.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;D&lt;/td&gt; &lt;td&gt;Desempeño de pago insatisfactorio. Elementos cuantitativos del deudor insatisfactorios con debilidades en flujo de efectivo, liquidez, apalancamiento, y/o rentabilidad. Ya cayó en incumplimiento de pago o está en proceso de dejar de pagar.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;E&lt;/td&gt; &lt;td&gt;Desempeño de pago insatisfactorio. No existen elementos cuantitativos del deudor. Dejó de pagar y no tiene ninguna capacidad de afrontar sus obligaciones contractuales de deuda.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogoCalificacionCartera implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CatalogoCalificacionCartera';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
